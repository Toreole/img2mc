@page "/"
@using System.Text.Json
@using static System.Net.WebRequestMethods
@using Img2mc.Shared
@using BlazorWebAssembly.Client.Core

@implements IHandleEvent

@inject HttpClient Http
@inject ImageReconstructor imageReconstructor

@code {
    const long fileSizeLimit = 52428800;
    int blockSize = 8;
    public string BlockSizeString => blockSize.ToString() + "px";

    private bool UseTooltips { get; set; } = true;

    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        //blockData persists across page swaps. no need to get it again.
        if (imageReconstructor.blockData.Length != 0)
            return;
        var path = "images/tex_metadata.json";
        string json = await Http.GetStringAsync(path);
        imageReconstructor.blockData = JsonSerializer.Deserialize<MinecraftBlock[]>(json) ?? new MinecraftBlock[0];
        imageReconstructor.OnOutputChanged += StateHasChanged;
    }

    ~Index()
    {
        imageReconstructor.OnOutputChanged -= StateHasChanged;
    }

    private void SelectedFileChanged(InputFileChangeEventArgs args)
    {
        selectedFile = args.File;
        Console.WriteLine($"File Selected: {args.File.Name} ||| is: {args.File.ContentType}");
        imageReconstructor.ReadFile(args.File.OpenReadStream(fileSizeLimit));
    }

    private void RetryButtonPressed()
    {
        if(selectedFile != null)
        {
            imageReconstructor.ReadFile(selectedFile.OpenReadStream(fileSizeLimit));
        }
    }

    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object? arg)
        => callback.InvokeAsync(arg);
}

<PageTitle>Img2Mc</PageTitle>

<MudSlider Min="16" Max="128" @bind-Value="imageReconstructor.MaxOutputImageSize" Style="width: 200px"> 
    Max Size: @imageReconstructor.MaxOutputImageSize
</MudSlider>

<MudSlider Min="3" Max="16" @bind-Value="blockSize" Style=@($"width: 200px; --block-size:{ BlockSizeString }")>
    Block Size: @blockSize
</MudSlider>

<MudSlider Min="0f" Max="100f" @bind-Value="imageReconstructor.ContrastBias" Style="width: 200px" Step="0.05f"> 
    Contrast Bias: @imageReconstructor.ContrastBias
</MudSlider>

<MudSlider Min="-1" Max="50" @bind-Value="imageReconstructor.GreedyTextureThreshold" Style="width: 200px" Step="1">
    Greedy Selection Threshold: @imageReconstructor.GreedyTextureThreshold
</MudSlider>

<MudCheckBox Checked="UseTooltips">
    Use Tooltips (Only available for max size 32, absolutely wrecks performance!)
</MudCheckBox>
<MudButton OnClick="RetryButtonPressed">Retry</MudButton>


Please Select an image file:

<InputFile OnChange="SelectedFileChanged"></InputFile>

        @if (imageReconstructor.OutputTextures != null)
{
    <div>Output texture is not null here</div>
    <table>
        <thead></thead>
        @for (int row = 0; row < imageReconstructor.OutputRows; row++)
        {
            <tr class="mc_row" style="--block-size: @BlockSizeString">
                @for (int column = 0; column < imageReconstructor.OutputColumns; column++)
                {
                    var tex = imageReconstructor.OutputTextures[column, row];

                    <td class="mc_block">
                        @if(UseTooltips && imageReconstructor.OutputTextures.Length < 1024)
                        {
                            <MudTooltip Text="@tex.blockName" Arrow Placement="Placement.Top">
                                <img src="images/mc_textures/@tex.fileName" class="mc_block" />
                            </MudTooltip>
                        }
                        else
                        {
                            <img src="images/mc_textures/@tex.fileName" class="mc_block" />
                        }
                    </td>
                }
            </tr>
        }
    </table>
}

<h2>Required blocks</h2>
<ol>
    @foreach (var pair in imageReconstructor.blockCounts.OrderByDescending(x => x.Value))
    {
        <li>
            <img src="images/mc_textures/@pair.Key.FirstTexture" /> @pair.Key.blockName x @pair.Value
        </li>
    }
</ol>


<!-- take this out for now.
<table>
    <thead>
        <tr>
            <th scope="col">Texture</th>
            <th scope="col">Block</th>
            <th scope="col">RGB</th>
        </tr>
    </thead>
    @@foreach (var entry in textureData)
    {
        <tr>
            <td><img src="images/mc_textures/@@entry.fileName" /></td>
            <td>@@entry.blockName</td>
            <td style="background-color: @@entry.averageRGB.AsHexString()">@@entry.averageRGB</td>
        </tr>
    }
</table>
-->
