@page "/"
@using System.Text.Json;
@using static System.Net.WebRequestMethods;

@inject HttpClient Http

@code {
    string json = "[]";
    string firstPixelRGBA = "";
    TextureMetadata[] textureData = new TextureMetadata[0];

    TextureMetadata[,]? outputTextures = null;
    Dictionary<TextureMetadata, int> textureCounts = new();
    int outputRows = 0;
    int outputColumns = 0;
    int blockSize = 8;
    public string BlockSizeString => blockSize.ToString() + "px";

    protected override async Task OnInitializedAsync()
    {
        var path = "images/tex_metadata.json";
        string json = await Http.GetStringAsync(path);
        textureData = JsonSerializer.Deserialize<TextureMetadata[]>(json) ?? new TextureMetadata[0];
    }

    private void SelectedFileChanged(InputFileChangeEventArgs args)
    {
        Console.WriteLine($"File Selected: {args.File.Name} ||| is: {args.File.ContentType}");
        ReadFile(args.File.OpenReadStream(maxAllowedSize: 52428800));
    }

    private async void ReadFile(Stream stream)
    {
        try
        {
            using Image<Rgba32> img = await Image.LoadAsync<Rgba32>(stream);
            Console.WriteLine($"Read the file as image: {img.ToString()}");
            var px = img[0, 0];

            if(img.Width > 128)
            {
                img.Mutate(x => x.Resize(128, 0));
            }
            else if(img.Height > 128)
            {
                img.Mutate(x => x.Resize(0, 128));
            }
            Console.WriteLine($"Resized image to {img.ToString()}");
            outputColumns = img.Width;
            outputRows = img.Height;
            var buffer = new TextureMetadata[outputColumns, outputRows];
            for(int x = 0; x < outputColumns; x++)
            {
                for(int y = 0; y < outputRows; y++)
                {
                    buffer[x, y] = FindBestMatchingTexture(img[x, y]);
                }
            }
            Console.WriteLine("Done processing image.");
            textureCounts.Clear();
            foreach(var tex in buffer)
            {
                if(textureCounts.ContainsKey(tex))
                {
                    textureCounts[tex]++;
                }
                else
                {
                    textureCounts[tex] = 1;
                }
            }
            outputTextures = buffer;
            img.Dispose();
            this.StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private TextureMetadata FindBestMatchingTexture(Rgba32 pixel)
    {
        RGB col = new() { r = pixel.R, g = pixel.G, b = pixel.B };
        return textureData.OrderBy(x => x.averageRGB.RGBDistance(col)).First();
    }
}
<style>
    .mc_block {
        width: var(--block-size);
        height: var(--block-size);
        max-height: var(--block-size);
        line-height: 0px;
        margin: 0;
        border: none;
        padding: 0;
    }
    .mc_row {
        height: var(--block-size);
        max-height: var(--block-size);
        line-height: 0px;
        margin: 0;
        padding: 0;
        border: none;
    }
</style>
<PageTitle>Img2Mc</PageTitle>

<p style="--block-size: @BlockSizeString"> Block Size is currently @BlockSizeString </p>
<input type="number" @bind-value="@blockSize" />


Please Select an image file:

<InputFile OnChange="SelectedFileChanged"></InputFile> 

@if(outputTextures != null)
{
    <div>Output texture is not null here</div>
    <table>
        <thead></thead>
        @for(int row = 0; row < outputRows; row++)
        {
            <tr class="mc_row" style="--block-size: @BlockSizeString">
            @for(int column = 0; column < outputColumns; column ++)
            {
                <td class="mc_block">
                        <img src="images/mc_textures/@outputTextures[column, row].fileName" class="mc_block" style="--block-size: @BlockSizeString" />
                    
                </td>
            }
            </tr>
        }
    </table>
}

<h2>Required blocks</h2>
<ol>
@foreach (var pair in textureCounts.OrderByDescending(x => x.Value))
{
    <li>
            <img src="images/mc_textures/@pair.Key.fileName" /> @pair.Key.blockName x @pair.Value
    </li>
}
</ol>


<!-- take this out for now.
<table>
    <thead>
        <tr>
            <th scope="col">Texture</th>
            <th scope="col">Block</th>
            <th scope="col">RGB</th>
            <th scope="col">Hue V</th>
            <th scope="col">Sat V</th>
            <th scope="col">Sat A</th>
            <th scope="col">Val V</th>
        </tr>
    </thead>
    @@foreach (var entry in textureData)
    {
        <tr>
            <td><img src="images/mc_textures/@@entry.fileName" /></td>
            <td>@@entry.blockName</td>
            <td style="background-color: @@entry.averageRGB.AsHexString()">@@entry.averageRGB</td>
            <td>@@entry.hueVariance</td>
            <td>@@entry.saturationVariance</td>
            <td>@@entry.averageSaturation</td>
            <td>@@entry.valueVariance</td>
        </tr>
    }
</table>
-->
